#!/usr/bin/env python3
''' This coroutine uses wait_random n number of times with the given
max_delay. It then returns the list of all the delays generated by
wait_random in ascending order because of concurrency. '''

import asyncio
from typing import List
task_wait_random = __import__('3-tasks').task_wait_random


async def wait_n(n: int, max_delay: int = 10) -> List[float]:
    ''' Uses task_wait_random in a loop to generate a taskList
        of n number of times to do wait_random.
        Then uses asyncio.as_completed in a loop to generate a resultList
        of the results from wait_random. '''
    taskList = []
    resultList = []

    for x in range(n):
        task = task_wait_random(max_delay)
        taskList.append(task)

    for task in asyncio.as_completed(taskList):
        result: float = await task
        resultList.append(result)

    return resultList
